#include <iostream>
#include <vector>

enum Opcode { HALT, NOOP, ADD, NAND, MULT, LW, SW, BEQ };

class Processor {
public:
    Processor() : pc(0), running(true) {
        registers.resize(8, 0); // 8 general-purpose registers
    }

    void execute(std::vector<std::pair<Opcode, std::vector<int>>>& instructions) {
        while (running && pc < instructions.size()) {
            auto [opcode, operands] = instructions[pc];

            switch (opcode) {
                case HALT:
                    running = false;
                    break;
                case NOOP:
                    // Do nothing
                    break;
                case ADD:
                    registers[operands[2]] = registers[operands[0]] + registers[operands[1]];
                    break;
                case NAND:
                    registers[operands[2]] = ~(registers[operands[0]] & registers[operands[1]]);
                    break;
                case MULT:
                    registers[operands[2]] = registers[operands[0]] * registers[operands[1]];
                    break;
                case LW:
                    registers[operands[0]] = memory[operands[1]]; // Load word
                    break;
                case SW:
                    memory[operands[1]] = registers[operands[0]]; // Store word
                    break;
                case BEQ:
                    if (registers[operands[0]] == registers[operands[1]]) {
                        pc += operands[2]; // Branch to the specified offset
                    }
                    break;
            }
            pc++;
        }
    }

    void printRegisters() {
        for (int i = 0; i < registers.size(); ++i) {
            std::cout << "R" << i << ": " << registers[i] << std::endl;
        }
    }

private:
    std::vector<int> registers;
    std::vector<int> memory = std::vector<int>(256, 0); // Simple memory model
    int pc; // Program counter
    bool running; // Processor running state
};

int main() {
    Processor cpu;

    // Example instruction set
    std::vector<std::pair<Opcode, std::vector<int>>> instructions = {
        { LW, {0, 10} }, // Load value at memory[10] into R0
        { LW, {1, 20} }, // Load value at memory[20] into R1
        { ADD, {0, 1, 2} }, // R2 = R0 + R1
        { NAND, {2, 1, 3} }, // R3 = ~(R2 & R1)
        { MULT, {0, 1, 4} }, // R4 = R0 * R1
        { BEQ, {0, 1, 2} }, // Branch to PC + 2 if R0 == R1
        { NOOP, {} }, // No operation
        { HALT, {} } // Stop execution
    };

    cpu.execute(instructions);
    cpu.printRegisters();

    return 0;
}
